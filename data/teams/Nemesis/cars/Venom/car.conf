# Copyright (C) 2009, 2010, 2011, 2012 Mats Wahlberg
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved. This file is offered as-is,
# without any warranty.

#
#motor+gearbox:
#

#how much torque (by rotation speed, unit: Nm*rad/s)
power 4000000


#
#motor+gearbox
#
#simulated as continuously variable = full usage of power at
#all velocities, torque decreases smoothly by velocity

#torque can be limited for low velocity to prevent simulation
#instability and the front lifting at acceleration
#(can be described in two ways, choose the one you like)

#rotation below this will not get more torque
gear_limit 0 #0=disabled 

#torque will not go higher than this
torque_limit 100000 #0=disabled


#limit torque on wheels if in air (motor+brakes)
#(used to prevent car from flipping over when leaving ground)
air_torque_limit 500 #inf to disable

#distribution of motor between front and back
#(set both true for 4WD)
motor_distribution false true #only rear driving

#differential: even distribution of motor torque over wheels
#(disable this to get one (weaker) motor+gearbox for each wheel)
differential true

#redistributes torque over wheels based on how their velocity differ
#(like a "limited slip differential", but supports all wheels)
torque_redistribution false true #adjust rear wheels to each others

#allow different velocity based on turning
adaptive_redistribution false

#how quickly the differing velocity should be fixed
redistribution_force 100



#
#brakes:
#

#braking force
max_brake 80000 #for soft brakes, drifting is always inf

#distribution of brakes between back and front
#(drifting brakes are not affected - always locks rear wheels)
brake_distribution 0.5 #braking %50 front and back

#this is guaranteed to completely lock the rear wheels
#(only good when wheel mass is much lower than car mass)
handbrake_lock true



#
#steering:
#

#max steering
max_steer 35 #degrees

#distribution of steering between back and front
steer_distribution 1 #100% front wheel steering

#how much the turning is decreased by car velocity
steer_decrease 0.001 #(0 = disabled)

#but never decrease turning more than this
min_decreased_steer 0 #degrees

#change maximum steering this fast
steer_limit_speed 100 #degrees per second

#differnt turn on inner/outer wheels when turning (popularly called "Ackermann
#Steering", although Erasmus Darwin probably invented it first)
adaptive_steering true

#toe in/out for front and rear wheel pairs in degrees
toe 0 0


#
#car properties:
#

body:mass 4000 #in kg
body 2.6 5.8 0.7 #mass positioning (should be similar to geometrical shape)
wheel:mass 30 #in kg

#wheel suspension
suspension:spring 120000.0
suspension:damping 10000.0
#compensate gravity and downforce by applying extra suspension force
suspension:elevation true #keep suspension centered

#downforce:
#total wanted downforce (including normal gravity pull)
downforce:max 150000 #a bit more than 3x normal gravity
#use downforce to pull the car down when in air
downforce:in_air true #reduces air-time (and jump possibilities)
#potential downforce by aerodynamics (= this * velocity^2 * air_density)
downforce:aerodynamic 30
#potential downforce by imaginary extra mass (= this * gravity-along-down-axis)
downforce:mass_boost 15000 #more than 2x mass, enough for 3x gravity at still

#values for calculating air (and water) drag/friction:
body:linear_drag 3 1 5 #X (sideways), Y (forward/backward) and Z (up/down)
body:angular_drag 10
wheel:linear_drag 0
wheel:angular_drag 0.5


#wheel (rim+tyre) properties:
wheel:spring 300000 #newtons per meter of tyre compresion
wheel:damping 100 #damping of spring force from above

#fixes bending axes at high speeds
wheel:finite_rotation true

#rolling resistance: braking torque on tyre from ground (and tyre compression)
wheel:rollres 20000

#determine if part of wheel is tyre or rim
wheel:rim_angle 60 #rim if wheel tilts more than 60°
wheel:rim_mu 0.1 #friction on (metal) sides of wheel

#merge redundant contact points for each collision (check for similar normals)
#makes wheels (movement&grip) more stable and predictable on dense trimeshes
tyre:merge_angle 0 #merge points with angles between normals under 10°

#
#The Not-So-Magic formula:
#
#Reasonably realistic dynamic simulation of friction (mu) for tyres, inspired
#by popular tyre models (like pacejka's magic formula and the brush model,
#nicely explained in: http://www.control.lth.se/documents/2003/gaf%2B03.pdf ).
#
#Designed for simulation (stability, ease of configuration) instead of serious
#tyre research.
#
#SR and SA are defined as:
# SR = Slip_x/Vel_ground_x
# SA = atan(Slip_y/Vel_ground)
#(where Slip_x and Slip_y are velocity difference between tyre and ground)
#
#As they increase, the friction goes from a low minimum ("static") to a maxima
#("peak"), then decreases and becomes a constant ("tail").

#the following describes the curves translating slip to friction, mu=f(slip)
#inter-/extrapolation as following:
#(0, static) to (peak_slip, peak_mu), polynomial of degree 2 (x=0 not extremum)
#(peak_slip, peak_mu) to (tail_slip, tail_mu), polynomial of degree 3
#(tail_slip, tail_mu) to (slip>tail_slip, tail_mu), constant mu=tail_mu

#along wheel heading (longitudinal)
tyre:x.static 0.3 #0.2N/N friction (mu) at low/no slip ratio
tyre:x.peak 0.1 1.8 #2.2N/N friction (mu) at 10% slip ratio
tyre:x.tail 1 1.5 #0.5N/N friction (mu) at 200% and higher slip ratio

#sideways from wheel heading (lateral)
tyre:y.static 0.3 #0.2N/N friction (mu) at low/no slip angle
tyre:y.peak 10 1.8 #2.2N/N friction (mu) at 20° slip angle
tyre:y.tail 30 1.5 #1.8N/N friction (mu) at 60° and higher slip angle

#alternative SR, SA definitions:
# SR = Slip_x/Max{Vel_tyre_x, Vel_ground_x}, limits SR range to 0-1
tyre:x.alt_denom false #don't think it's better
# SA = atan(Slip_y/Slip_x), SA based on wheel rotation speed, not axle speed
tyre:y.alt_denom true #think it might be more accurate

#prevent (unstable) division with denominators lower than this (use instead):
tyre:x.min_denom 0.5
tyre:y.min_denom 0.5

#friction is modified by a combined slip/grip method using a friction ellipse
#and the direction of slip (inspired by Kamm's circle), for instance:
#new mu in X direction = Mu_x*Slip_x/Slip_total = Mu_x/sqrt(1+Slip_y²/Slip_x²)
#this gets unstable at low slips (~static), so set low limits for Slip_x above:
tyre:x.min_combine 0.5 #x slip is always above 0.01m/s for Mu_x scaling
tyre:y.min_combine 0.5 #y slip is always above 0.01m/s for Mu_y scaling

#how much should friction in one direction decrease by friction in the other?
#1=normal, 0=none, high values means more loss of grip when spinning/drifting
tyre:x.scale_combine 1.0 #normal sensitivity
tyre:y.scale_combine 1.0 #normal sensitivity

#TODO: method is hard-coded, add option for choosing method/disable combining? 

#
#car model (for rendering):
#

model Venom.obj
#defaults:
model:resize 1
model:rotate 0 0 0
model:offset 0 0 0


#debug values for disabling/enabling certain features:
debug:turn true #turn steering wheels (if disabled, look at adapt. redist.)
debug:gyroscopic true #gyroscopic effect on wheels
#currently, wheel geoms (cylinders) can't collide with eash others
#use alternative geoms? (bodies/mass will remain cylinders)
debug:sphere_wheels false
debug:capsule_wheels false

#....finally: some important values that have not been decided yet:
s 4.8 3.6 1.6 1.25 #xyz and z offset for "which-side-towards-ground" sensors
w 1.25 1.4 #radius and width for wheels
wp 2.4 1.8 #x and y offset positions for wheels
jx 2.05 #x offset position for wheel steering joints

